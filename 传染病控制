/*研究表明，这种传染病的传播具有两种很特殊的性质；

第一是它的传播途径是树型的，一个人 XX 只可能被某个特定的人 YY 感染，只要 YY 不得病，或者是 XYXY 之间的传播途径被切断，则 XX 就不会得病。

第二是，这种疾病的传播有周期性，在一个疾病传播周期之内，传染病将只会感染一代患者，而不会再传播给下一代。

这些性质大大减轻了蓬莱国疾病防控的压力，并且他们已经得到了国内部分易感人群的潜在传播途径图（一棵树）。但是，麻烦还没有结束。由于蓬莱国疾控中心人手不够，同时也缺乏强大的技术，以致他们在一个疾病传播周期内，只能设法切断一条传播途径，而没有被控制的传播途径就会引起更多的易感人群被感染（也就是与当前已经被感染的人有传播途径相连，且连接途径没有被切断的人群）。当不可能有健康人被感染时，疾病就中止传播。所以，蓬莱国疾控中心要制定出一个切断传播途径的顺序，以使尽量少的人被感染。

你的程序要针对给定的树，找出合适的切断顺序。

输入格式
输入格式：
第一行是两个整数 nn 和 pp。
接下来 pp 行，每一行有 22 个整数 ii 和 jj，表示节点 ii 和 jj 间有边相连。（意即，第 ii 人和第 jj 人之间有传播途径相连）。其中节点 11 是已经被感染的患者。

输出格式
11 行，总共被感染的人数。
[NOIP2003 提高组] */
#include<cstdio>
#include<cmath>
#include<iostream>
using namespace std;
const int maxn=500;
int vis[maxn],deep[maxn][maxn],count[maxn];
int n,m,i,j,x,y,ans=1006,maxx=0;
struct Node
{
    int father,child[maxn],number;
};
Node node[maxn];
void Input(void)
{
    scanf("%d%d",&n,&m);
    for(i=1;i<=n;i++)
    {
        node[i].number=0;
        count[i]=1;
    }
    for(i=1;i<=m;i++)
    {
        scanf("%d%d",&x,&y);
        if(x>y) swap(x,y);
        node[y].father=x;
        node[x].number++;
        node[x].child[node[x].number]=y;
    }
}
void Deep(int tree,int now)
{
    maxx=max(maxx,now);
    for(int i=1;i<=node[tree].number;i++)
    {
        deep[now][0]++;
        deep[now][deep[now][0]]=node[tree].child[i];
        Deep(node[tree].child[i],now+1);
    }
    return ;
}
int Count(int tree)
{
    for(int i=1;i<=node[tree].number;i++)
    {
        count[tree]+=Count(node[tree].child[i]);
    }
    return count[tree];
}
void work(int tree,int tag)
{
    for(int i=1;i<=node[tree].number;i++)
    {
        vis[node[tree].child[i]]=tag;
        work(node[tree].child[i],tag);
    }
    return ;
}
void dfs(int now,int cnt) 
{
    if(now==maxx)
    {
        ans=min(ans,cnt);
        return ;
    }
    int f=0;
    for(int i=1;i<=deep[now][0];i++)
    {
        if(vis[deep[now][i]]>0)
        {
            f++;
            continue;
        }
        vis[deep[now][i]]=1;
        work(deep[now][i],1);
        dfs(now+1,cnt-count[deep[now][i]]);
        vis[deep[now][i]]=0;
        work(deep[now][i],0);
    }
    if(f==deep[now][0]) ans=min(ans,cnt);
}
int main()
{
    Input();
    Deep(1,2);
    Count(1);
    dfs(2,n);
    printf("%d",ans);
    return 0;
}
